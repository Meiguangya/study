### 进程和线程的区别
1. 进程是执行程序的一次执行过程，是系统资源分配的单位
2. 一个进程包含多个线程，线程是CPU调度和执行的基本单位

### 创建线程的几种方式
1. 继承Thread类
2. 实现Runnable
3. 实现Callable
4. 使用线程池

### 静态代理模式
1. 真实对象和代理对象都要实现同一个接口
2. 代理对象要代理真实的角色
3. 好处：代理对象可以做很多真实对象做不了的事 真实对象专注于自己的事

```
class MyThread implement Runnable{
    
}
Thread t = new Thread(new MyThread();
```

### 线程的五大状态
创建 就绪 阻塞 运行 死亡

### 停止线程
1. 不推荐使用jdk的 stop、destroy方法
2. 推荐让线程自己停下来
3. 建议使用标识位进行终止变量，当flag=false，线程终止

### 线程休眠
```
Thread.sleep(1000);
```

### 线程礼让
1. 礼让线程，让当前正在执行的线程暂停，但不阻塞
2. 将线程从运行状态变成就绪状态
3. 礼让不一定成功，还得看CPU
```
Thread.yield();
```

### join
1. 线程插队

### 线程里面的状态
```
Thread.State
```
1. NEW
2. RUNNABLE
3. BLOCKED
4. WAITING
5. TIMED_WAITING
6. TERMINATED
> 线程死亡后 就不能在启动了 只能启动一次

### 线程的优先级 priority
> 1~10 优先级高的不一点先执行 还是得看CPU

### 守护线程  Daemon
> 虚拟机不会等待守护线程执行完毕，用户线程执行完毕后 虚拟机就关闭了


## 线程同步机制
> 并发 同一个对象被多个线程同时操作  
> 线程同步是一种等待机制，等待前面一个线程使用完毕，下一个线程继续使用  
> 线程同步需要队列+锁  

